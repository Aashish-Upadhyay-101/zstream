generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id                     String                   @id @default(cuid())
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?
    image                  String?
    backgroundImage        String?
    handle                 String?
    description            String?                  @db.Text
    accounts               Account[]
    announcement           Announcement[]
    announcementEngagement AnnouncementEngagement[]
    comment                Comment[]
    follower               FollowEngagement[]       @relation("follower")
    following              FollowEngagement[]       @relation("following")
    Playlist               Playlist[]
    sessions               Session[]
    videos                 Video[]
    videoEngagements       VideoEngagement[]
}

model Video {
    id               String             @id @default(cuid())
    title            String
    thumbnailUrl     String?
    description      String?
    videoUrl         String
    published        Boolean            @default(true)
    userId           String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    comment          Comment[]
    playlistHasVideo PlaylistHasVideo[]
    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    videoEngagement  VideoEngagement[]

    @@index([userId])
}

model VideoEngagement {
    id             String         @id @default(cuid())
    videoId        String
    userId         String
    engagementType EngagementType
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    video          Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([videoId])
}

model Comment {
    id        String   @id @default(cuid())
    message   String
    videoId   String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([videoId])
}

model Announcement {
    id                     String                   @id @default(cuid())
    message                String
    userId                 String
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    AnnouncementEngagement AnnouncementEngagement[]

    @@index([userId])
}

model AnnouncementEngagement {
    userId         String
    announcementId String
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, announcementId])
    @@index([userId])
    @@index([announcementId])
}

model FollowEngagement {
    followerId     String
    followingId    String
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    follower       User           @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    following      User           @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model Playlist {
    id               String             @id @default(uuid())
    title            String
    description      String
    userId           String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    playlistHasVideo PlaylistHasVideo[]

    @@index([userId])
}

model PlaylistHasVideo {
    id         String   @id @default(uuid())
    playlistId String
    videoId    String
    playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([playlistId, videoId])
    @@index([playlistId])
    @@index([videoId])
}

enum EngagementType {
    LIKE
    DISLIKE
    VIEW
    COMMENT
    FOLLOW
}
